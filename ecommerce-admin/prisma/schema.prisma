// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Store {
  id          String        @id @default(uuid())
  name        String    
  userId      String  
  billboards  Billboard[]   @relation("StoreToBillboard")
  categories  Category[]    @relation("StoreToCategory")
  sizes       Size[]        @relation("StoreToSize")
  colors      Color[]       @relation("StoreToColor")
  products    Product[]     @relation("StoreToProduct")
  orders      Order[]       @relation("StoreToOrder")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]  @relation("BillboardToCategory")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id            String      @id @default(uuid())
  storeId       String    
  store         Store       @relation("StoreToCategory", fields: [storeId], references: [id]) 
  billboardId   String
  billboard     Billboard   @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products      Product[]   @relation("CategoryToProduct")
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Size {
  id            String           @id @default(uuid())
  storeId       String    
  store         Store            @relation("StoreToSize", fields: [storeId], references: [id]) 
  productSizes  ProductSize[]    @relation("SizeToProductSize")
  name          String 
  value         String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model Color {
  id                String              @id @default(uuid())
  storeId           String            
  store             Store               @relation("StoreToColor", fields: [storeId], references: [id]) 
  productColors     ProductColor[]        @relation("ColorToProductColor")
  name              String        
  value             String        
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Product {
  id                String            @id @default(uuid())
  storeId           String            
  store             Store             @relation("StoreToProduct", fields: [storeId], references: [id]) 
  categoryId        String            
  category          Category          @relation("CategoryToProduct", fields: [categoryId], references: [id] )
  sizeId            String        
  productSizes      ProductSize[]     @relation("ProductToProductSize")
  colorId           String            
  productColors     ProductColor[]      @relation("ProductToProductColor")
  images            Image[]           @relation("ProductToImage")
  orderItems        OrderItem[]       @relation("ProductToOrderItem")
  name              String        
  price             Decimal       
  isFeatured        Boolean           @default(false)
  isArchived        Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model ProductSize {
  id            String      @id @default(uuid())
  sizeId        String
  size          Size       @relation("SizeToProductSize", fields: [sizeId], references: [id])
  productId     String    
  product       Product     @relation("ProductToProductSize", fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model ProductColor {
  id            String      @id @default(uuid())
  colorId       String
  color         Color       @relation("ColorToProductColor", fields: [colorId], references: [id])
  productId     String    
  product       Product     @relation("ProductToProductColor", fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Image {
  id            String      @id @default(uuid())
  productId     String 
  product       Product     @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)   
  url           String  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Order {
  id            String        @id @default(uuid())
  storeId       String      
  store         Store         @relation("StoreToOrder", fields: [storeId], references: [id]) 
  orderItems    OrderItem[]   @relation("OrderToOrderItem")
  isPaid        Boolean       @default(false)
  phone         String        @default("")
  address       String        @default("")       
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model OrderItem {
  id            String      @id @default(uuid())
  orderId       String
  order         Order       @relation("OrderToOrderItem", fields: [orderId], references: [id])
  productId     String    
  product       Product     @relation("ProductToOrderItem", fields: [productId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}