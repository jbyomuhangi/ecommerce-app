// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Store {
  id          String        @id @default(uuid())
  name        String    
  userId      String  
  billboards  Billboard[]   @relation("StoreToBillboard")
  categories  Category[]    @relation("StoreToCategory")
  sizes       Size[]        @relation("StoreToSize")
  colors      Color[]       @relation("StoreToColor")
  products    Product[]     @relation("StoreToProduct")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Billboard {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]  @relation("BillboardToCategory")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id            String      @id @default(uuid())
  storeId       String    
  store         Store       @relation("StoreToCategory", fields: [storeId], references: [id]) 
  billboardId   String
  billboard     Billboard   @relation("BillboardToCategory", fields: [billboardId], references: [id])
  products      Product[]   @relation("CategoryToProduct")
  name          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Size {
  id            String      @id @default(uuid())
  storeId       String    
  store         Store       @relation("StoreToSize", fields: [storeId], references: [id]) 
  products      Product[]   @relation("SizeToProduct")
  name          String 
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Color {
  id            String      @id @default(uuid())
  storeId       String    
  store         Store       @relation("StoreToColor", fields: [storeId], references: [id]) 
  products      Product[]   @relation("ColorToProduct")
  name          String 
  value         String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Product {
  id            String      @id @default(uuid())
  storeId       String    
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id]) 
  categoryId    String     
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id] )
  sizeId        String
  size          Size        @relation("SizeToProduct", fields: [sizeId], references: [id])
  colorId       String      
  color         Color       @relation("ColorToProduct", fields: [colorId], references: [id])
  images        Image[]     @relation("ProductToImage")
  name          String
  price         Decimal
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Image {
  id            String      @id @default(uuid())
  productId     String 
  product       Product     @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)   
  url           String  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
